import React from 'react'

import doctypeImage from '../image/doctype.png'
import titlebrowser from "../image/titlebrowser.png"

const HtmlStructure = () => {

	return (


		<div>
		
			<div>

				
				<p>Если открыть любую веб-страницу, то она будет содержать
				в себе типичные элементы, которые
				не меняются от вида и направленности сайта. </p>


				<div className="wrap-content">
					<table>
						<tr><td> <p>Пример кода:</p></td> <td><p>Отображение кода на странице: </p></td></tr>
						<tr> <td>  <pre> <code>


							&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; <br></br>
                        &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;<br></br>

                        &lt;html&gt;<br></br>

                        &lt;head&gt;<br></br>

                        &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;<br></br>

                        &lt;title&gt;Пример веб-страницы&lt;/title&gt;<br></br>

                        &lt;/head&gt;<br></br>

                        &lt;body&gt;<br></br>

                        &lt;h1&gt;Заголовок&lt;/h1&gt;<br></br>
						&lt;!-- Комментарий --&pt;
						&lt;p&gt;Первый абзац.&lt;/p&gt;<br></br>
						&lt;p&gt;Второй абзац.&lt;/p&gt;<br></br>
                        &lt;/body&gt;<br></br>
                        &lt;/html&gt;<br></br>
						</code></pre>
						</td>

							<td>
								<div >
									<h1>Заголовок</h1>
									<p>Первый абзац.</p>
									<p>Второй абзац.</p>
								</div>
							</td>
						</tr>
					</table>


				</div>
				<p>Разберем отдельные строки нашего кода:</p>
				<p>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; <br></br>
                        &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;<br></br></p>
				<p> Элемент &lt;!DOCTYPE&gt; предназначен для указания типа текущего документа — DTD (document type definition, описание типа документа). Это необходимо, чтобы браузер понимал, как следует интерпретировать текущую веб-страницу, ведь HTML существует в нескольких версиях, кроме того, имеется XHTML (EXtensible HyperText Markup Language, расширенный язык разметки гипертекста), похожий на HTML, но различающийся с ним по синтаксису. Чтобы браузер «не путался» и понимал, согласно какому стандарту отображать веб-страницу и необходимо в первой строке кода задавать
							&lt;!DOCTYPE&gt;. </p>
				<p>Существует несколько видов &lt;!DOCTYPE&gt;, они различаются в зависимости от версии HTML, на которую ориентированы. </p>
				<div className="image-center">
					<img src={doctypeImage} alt="browser"></img>
				</div>
				<p>
					Разница между строгим и переходным описанием документа состоит в различном подходе к написанию кода документа. Строгий HTML требует жесткого соблюдения спецификации HTML и не прощает ошибок. Переходный HTML более «спокойно» относится к некоторым огрехам кода, поэтому этот тип в определенных случаях использовать предпочтительнее.
				</p>
				<p>
					Например, в строгом HTML и XHTML непременно требуется наличие тега  &lt;title&gt;  а в переходном HTML его можно опустить и не указывать. При этом помним, что браузер в любом случае покажет документ, независимо от того, соответствует он синтаксису или нет. Подобная проверка осуществляется при помощи валидатора и предназначена в первую очередь для разработчиков, чтобы отслеживать ошибки в документе.
				</p>
				<p>В дальнейшем будем применять преимущественно строгий &lt;!DOCTYPE&gt;, кроме случаев, когда это оговаривается особо. Это позволит нам избегать типичных ошибок и приучит к написанию синтаксически правильного кода.</p>
				<p>Часто можно встретить код HTML вообще без использования &lt;!DOCTYPE&gt;, веб-страница в подобном случае все равно будет показана. Тем не менее, может получиться, что один и тот же документ отображается в браузере по-разному при использовании &lt;!DOCTYPE&gt; и без него. Кроме того, браузеры могут по-своему показывать такие документы, в итоге страница «рассыплется», т.е. будет отображаться совсем не так, как это требуется разработчику. Чтобы не произошло подобных ситуаций, всегда добавляйте &lt;!DOCTYPE&gt; в начало документа. </p>

				<p>Тег &lt;html&gt; определяет начало HTML-файла, внутри него хранится заголовок (&lt;head&gt;) и тело документа (&lt;body&gt;). Последним элементом в коде всегда идет закрывающий тег &lt;/html&gt;. </p>
				<a href="http://htmlbook.ru/html/html " className="link-1">Подробнее о теге </a>
				<p>
					Заголовок документа, как еще называют блок &lt;head&gt;, может содержать текст и теги, но содержимое этого раздела не показывается напрямую на странице, за исключением контейнера &lt;title&gt;. Обязательно следует добавлять закрывающий тег &lt;/head&gt;, чтобы показать, что блок заголовка документа завершен. Делается это в конце работы с заголовком
			</p>
				<a href="http://htmlbook.ru/html/head" className="link-1">Подробнее о теге</a>

				<p>Тег &lt;meta&gt; является универсальным и добавляет целый класс возможностей, в частности, с помощью метатегов, как обобщенно называют этот тег, можно изменять кодировку страницы, добавлять ключевые слова, описание документа и многое другое. Чтобы браузер понимал, что имеет дело с кодировкой UTF-8 (Unicode transformation format, формат преобразования Юникод) и добавляется данная строка. </p>
				<a href="http://htmlbook.ru/html/meta" className="link-1">Подробнее о теге</a>
				<p>Тег  &lt;title&gt; определяет заголовок веб-страницы, это один из важных элементов предназначенный для решения множества задач. В операционной системе Windows текст заголовка отображается в левом верхнем углу окна браузера. Тег  &lt;title&gt; является обязательным и должен непременно присутствовать в коде документа. </p>
				<div>
					<img src={titlebrowser} alt="browser"></img>
				</div>
				<a href="http://htmlbook.ru/html/title" className="link-1" >Подробнее о теге</a>
				<p>Тело документа &lt;body&gt; предназначено для размещения тегов и содержательной части веб-страницы. Следует добавить закрывающий тег &lt;body&gt;, чтобы показать, что тело документа завершено. Делается это в конце работы с телом документа.</p>
				< a href="http://htmlbook.ru/html/body" className="link-1">Подробнее о теге</a>
				<p>

					HTML предлагает шесть текстовых заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег &lt;h1&gt; представляет собой наиболее важный заголовок первого уровня, а тег &lt;h6&gt; служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги &lt;h1&gt;...&lt;h6&gt; относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство.

			</p>
				<p>
					&lt;h1&gt; Заголовок &lt;/h1&gt;
			</p>
				<p>Некоторый текст можно спрятать от показа в браузере, сделав его комментарием. Хотя такой текст пользователь не увидит, он все равно будет передаваться в документе, так что, посмотрев исходный код, можно обнаружить скрытые заметки.</p>
				<p>
					Комментарии нужны для внесения в код своих записей, не влияющих на вид страницы. Начинаются они тегом &lt;!-- и заканчиваются тегом --&gt;. Все, что находится между этими тегами, отображаться на веб-странице не будет.
			</p>
				<p>
					Тег &lt;p&gt; определяет абзац (параграф) текста. Если закрывающего тега нет, считается, что конец абзаца совпадает с началом следующего блочного элемента. Тег &lt;p&gt; является блочным элементом, поэтому текст всегда начинается с новой строки, абзацы идущие друг за другом разделяются между собой отбивкой (так называется пустое пространство между ними).
			</p>
				<a href="http://htmlbook.ru/html/p" className="link-1">Подробнее о теге</a>
			</div >
		</div>
	)
}
export default HtmlStructure;